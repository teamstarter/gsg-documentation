{"componentChunkName":"component---src-templates-docs-js","path":"/resolvers/performances","result":{"data":{"site":{"siteMetadata":{"title":"GraphQL Sequelize Generator | Teamstarter","docsLocation":"https://github.com/teamstarter/gsg-documentation/tree/master/content"}},"mdx":{"fields":{"id":"70603b34-eedb-5bc4-b906-72d4157ffeec","title":"Performances","slug":"/resolvers/performances","description":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Performances\",\n  \"metaTitle\": \"Performances\",\n  \"metaDescription\": \"Here we talk about the performances of graphql-sequelize-generator\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"GSG uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mickhansen/graphql-sequelize\"\n  }), \"graphql-sequelize\"), \" under the hood, and so it inherit it's dependency \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mickhansen/dataloader-sequelize\"\n  }), \"dataloader-sequelize\"), \".\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Dataloader-sequelize\"), mdx(\"p\", null, \"Dataloader-sequelize (DS) is an implementation of the Facebook \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql/dataloader\"\n  }), \"dataloader\"), \" for the Sequelize ORM.\"), mdx(\"p\", null, \"DS uses hooks on the Sequelize models to intercept all queries made to the database. The ones that \\\"look alike\\\" are regrouped in a single query and the result of the single query is split and dispatch to the original calls. Awesome concept :)\"), mdx(\"p\", null, \"Yet it has drawbacks. The queries must not be too complexes.\"), mdx(\"p\", null, \"In the current implementation of DS, all queries with a \\\"where\\\" attributes in arguments are NOT batched. Only queries with findById and findByPk are taken in account.\"), mdx(\"p\", null, \"This works well with the default setup of GSG but be careful of the performance impact of your custom hooks!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"list: {\\n    before: (findOptions, args, context, info) => {\\n      // DO NOT DO THIS that way!!!\\n      if (typeof findOptions.where === 'undefined') {\\n        findOptions.where = {}\\n      }\\n\\n      // DO NOT DO THIS that way!!!\\n      findOptions.where = {\\n        [Op.and]: [findOptions.where, { companyId: context.user.companyId }]\\n      }\\n\\n      return findOptions\\n    }\\n  },\\n\")), mdx(\"p\", null, \"For example, the example above insure that the current user can only access the entities of his company. But this will only work efficiently for root queries!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"query okQuery {\\n   company {\\n     id\\n   }\\n}\\n\\nquery slowQuery {\\n   user {\\n     id\\n     relatedCompanies {\\n       id\\n     }\\n   }\\n}\\n\")), mdx(\"p\", null, \"To solve this, you must use the relation of your database. Only apply rights if you are fetching the entities from the root.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"list: {\\n    before: (findOptions, args, context, info) => {\\n      // For exemple you can only apply the rights when it parent entity\\n      // is not of a given type\\n      if (\\n        info.parentType &&\\n        info.parentType.name !== 'user'\\n      ) {\\n        // In any case, do not add the \\\"where\\\" attribute if you are not using it!\\n        // Just adding \\\"where = {}\\\" will remove the batching!\\n        if (typeof findOptions.where === 'undefined') {\\n          findOptions.where = {}\\n        }\\n\\n        findOptions.where = {\\n          [Op.and]: [findOptions.where, { id: context.user.organizationId }]\\n        }\\n      }\\n\\n      return findOptions\\n    }\\n  },\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#dataloader-sequelize","title":"Dataloader-sequelize"}]},"parent":{"relativePath":"resolvers/performances.md"},"frontmatter":{"metaTitle":"Performances","metaDescription":"Here we talk about the performances of graphql-sequelize-generator"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/resolvers","title":"Resolvers"}}},{"node":{"fields":{"slug":"/gettingStarted","title":"Getting started"}}},{"node":{"fields":{"slug":"/","title":"Getting started"}}},{"node":{"fields":{"slug":"/resolvers/1-defaultUsage","title":"Default usage"}}},{"node":{"fields":{"slug":"/server","title":"Server"}}},{"node":{"fields":{"slug":"/server/apolloConfiguration","title":"Apollo configuration"}}},{"node":{"fields":{"slug":"/resolvers/advancedConfiguration","title":"Advanced configuration"}}},{"node":{"fields":{"slug":"/resolvers/performances","title":"Performances"}}},{"node":{"fields":{"slug":"/server/configuration","title":"Configuration"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"70603b34-eedb-5bc4-b906-72d4157ffeec"}}}