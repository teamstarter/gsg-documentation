{"componentChunkName":"component---src-templates-docs-js","path":"/resolvers/1-defaultUsage","result":{"data":{"site":{"siteMetadata":{"title":"GraphQL Sequelize Generator | Teamstarter","docsLocation":"https://github.com/teamstarter/gsg-documentation/tree/master/content"}},"mdx":{"fields":{"id":"3af7871d-18c5-56d9-8c3c-612872a1f7fc","title":"Default usage","slug":"/resolvers/1-defaultUsage","description":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Default usage\",\n  \"metaTitle\": \"Default usage\",\n  \"metaDescription\": \"Here we descripbe the base functionnalities of graphql-sequelize-generator\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Resolvers configurations are grouped into a single configuration property of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"generateApolloServer\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"generateSchema\"), \".\"), mdx(\"p\", null, \"Here is the simplest example possible to define the \\\"user\\\" model:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"graphqlSchemaDeclaration.user = {\\n  model: models.user,\\n};\\n\")), mdx(\"p\", null, \"Assuming \\\"models\\\" is your import of the Sequelize models folder.\"), mdx(\"p\", null, \"This will by default:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a create \\\"user\\\" resolver to list all users\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create the userCreate, userUpdate and userDelete resolvers for the related mutations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a \\\"count\\\" resolver\")), mdx(\"h3\", null, \"Relations between endpoints\"), mdx(\"p\", null, \"Declaring many models will add the related models AND their associations to your GraphQL schema.\"), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"graphqlSchemaDeclaration.user = {\\n  model: models.user,\\n};\\ngraphqlSchemaDeclaration.car = {\\n  model: models.car,\\n};\\ngraphqlSchemaDeclaration.house = {\\n  model: models.house,\\n};\\n\")), mdx(\"p\", null, \"Will allow you to query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query test {\\n  user {\\n    id\\n    name\\n    house {\\n      id\\n      address\\n    }\\n    cars {\\n      id\\n      brand\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"If you have the relations set in your Sequelize folder.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F\\nAny relation linked to a model NOT defined in the graphqlSchemaDeclaration will be ignored. It's up to you to chose what do you expose.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#relations-between-endpoints","title":"Relations between endpoints"}]},"parent":{"relativePath":"resolvers/1-defaultUsage.md"},"frontmatter":{"metaTitle":"Default usage","metaDescription":"Here we descripbe the base functionnalities of graphql-sequelize-generator"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/gettingStarted","title":"Getting started"}}},{"node":{"fields":{"slug":"/","title":"Getting started"}}},{"node":{"fields":{"slug":"/server","title":"Server"}}},{"node":{"fields":{"slug":"/resolvers","title":"Resolvers"}}},{"node":{"fields":{"slug":"/server/apolloConfiguration","title":"Apollo configuration"}}},{"node":{"fields":{"slug":"/resolvers/1-defaultUsage","title":"Default usage"}}},{"node":{"fields":{"slug":"/server/configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/resolvers/advancedConfiguration","title":"Advanced configuration"}}},{"node":{"fields":{"slug":"/resolvers/performances","title":"Performances"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3af7871d-18c5-56d9-8c3c-612872a1f7fc"}}}