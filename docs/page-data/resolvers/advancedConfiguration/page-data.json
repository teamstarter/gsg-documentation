{"componentChunkName":"component---src-templates-docs-js","path":"/resolvers/advancedConfiguration","result":{"data":{"site":{"siteMetadata":{"title":"GraphQL Sequelize Generator | Teamstarter","docsLocation":"https://github.com/teamstarter/gsg-documentation/tree/master/content"}},"mdx":{"fields":{"id":"2c505ee9-f5a3-5e2f-a003-49682d886e49","title":"Advanced configuration","slug":"/resolvers/advancedConfiguration","description":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Advanced configuration\",\n  \"metaTitle\": \"Advanced configuration\",\n  \"metaDescription\": \"Here we descripbe the advanced configurations of graphql-sequelize-generator\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here is a sum-up of everything you can configure in a model declaration:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"graphqlSchemaDeclaration.user = {\\n  model: models.user,\\n  // You can specify any of those, will default to this list if not set.\\n  actions: ['list', 'create', 'delete', 'update', 'count'],\\n  // You can specify any of those, no subscriptions are created by default.\\n  subscriptions: ['create', 'update', 'delete'],\\n  // Exclude from root allows you to only define a model as a relation\\n  // to other models. It will not be listed in the root of the GraphQL\\n  // tree but will be available as child of other nodes.\\n  // Can be useful when you don't want to set the default rights for\\n  // a model.\\n  excludeFromRoot: false,\\n  // You can exclude some fields from the models. They will be be listed nor\\n  // available in a response. Useful for passwords and secrets in general.\\n  excludeFields: ['surveyAnswerRequest']\\n  // \\\"before\\\" is a list of functions to be called before\\n  // each resolvers of the model.\\n  before: [\\n    async (args, context, info) => {\\n      // Global before hook only have args, context and info.\\n      // You can use many functions or just one.\\n\\n      // Use it if you need to do something before each enpoint\\n      if (!context.bootDate) {\\n        throw new Error('Boot date is missing!')\\n      }\\n\\n      if (info.xxx) {\\n        throw new Error('Xxx is provided when it should not!')\\n      }\\n\\n      // Typical usage:\\n      // * Protect an endpoint\\n      // * Verify entity existance\\n\\n      // ex:\\n      // if (!context.user.role !== 'admin') {\\n      //   throw new Error('You must be admin to use this endpoint!')\\n      // }\\n\\n      // The function returns nothing\\n    }\\n  ],\\n  list: {\\n    // By default only attributes required in the GraphQL query\\n    // are fetched. You can disable this if you need to\\n    // post-process many properties not in the base query.\\n    // When false, all attributes will be fetched.\\n    removeUnusedAttributes: false,\\n    // Additional arguments can be added to the default ones.\\n    extraArg: { anotherArg: { type: GraphQLInt } },\\n    // A hook that will be called before the fetch in the database.\\n    // The returned object, \\\"findOptions\\\", will be directly given to\\n    // the find[One/All] after.\\n    before: async (findOptions, args, context, info) => {\\n      if (typeof findOptions.where === 'undefined') {\\n        findOptions.where = {}\\n      }\\n      findOptions.where = {\\n        [Op.and]: [findOptions.where, { departmentId: [1] }]\\n      }\\n      return findOptions\\n    },\\n    // A hook called after the data is fetched.\\n    // Can be used for post-processing or triggering log.\\n    after: async (result, args, context, info) => {\\n      if (result && typeof result.length !== 'undefined') {\\n        for (const user of result) {\\n          if (user.name === 'Test 5 c 2') {\\n            user.name = `Mr ${user.name}`\\n          }\\n        }\\n      }\\n\\n      return result\\n    },\\n    // If you want to overwrite the list resolver totally, you can.\\n    // When doing so the after and before will not be called.\\n    resolver: async (source, args, context) => {\\n      // custom code\\n      return [{id: 1, ...}]\\n    }\\n  },\\n  // The followings hooks are just here to demo their signatures.\\n  // They are not required and can be omited if you don't need them.\\n  create: {\\n    extraArg: { anotherArg: { type: GraphQLInt } },\\n    before: async (source, args, context, info) => {\\n      // You can restrict the creation if needed\\n      return args.user\\n    },\\n    after: async (newEntity, source, args, context, info) => {\\n      // You can log what happened here\\n      return newEntity\\n    },//\\n    subscriptionFilter: (payload, args, context) => {\\n      // Exemple of subscription check\\n      if (context.user.role !== 'admin') {\\n        return false\\n      }\\n      return true\\n    }\\n  },\\n  update: {\\n    extraArg: { anotherArg: { type: GraphQLInt } },\\n    before: async (source, args, context, info) => {\\n      // You can restrict the creation if needed\\n      return args.user\\n    },\\n    after: async (\\n      updatedEntity,\\n      entitySnapshot,\\n      source,\\n      args,\\n      context,\\n      info\\n    ) => {\\n      // You can log what happened here\\n      return updatedEntity\\n    },\\n    //\\n    subscriptionFilter: (payload, args, context) => {\\n      // Exemple of subscription check\\n      if (context.user.role !== 'admin') {\\n        return false\\n      }\\n      return true\\n    }\\n  },\\n  delete: {\\n    extraArg: { anotherArg: { type: GraphQLInt } },\\n    before: async (where, source, args, context, info) => {\\n      // You can restrict the creation if needed\\n      return where\\n    },\\n    after: async (deletedEntity, source, args, context, info) => {\\n      // You can log what happened here\\n      return deletedEntity\\n    },\\n    //\\n    subscriptionFilter: (payload, args, context) => {\\n      // Exemple of subscription check\\n      if (context.user.role !== 'admin') {\\n        return false\\n      }\\n      return true\\n    }\\n  },\\n  // When you want to add additional mutations,\\n  // you can add them here if they are related to the model.\\n  // Or in the server customMutations if they are not related.\\n  // This hook exists to easily understand what mutations impact the model.\\n  additionalMutations: {\\n     toggleMyProperty: {\\n        type: myUserOutputType,\\n        description:\\n          'Enable or disable a group for the current user.',\\n        args: {\\n          groupId: { type: GraphQLInt }\\n        },\\n        resolve: async (source, { groupId }, context, info) => {\\n          // your mutation code...\\n          return { user: updateUser }\\n        }\\n      }\\n    }\\n  },\\n  // You can add custom subscription if needed\\n  additionalSubscriptions: {\\n    fileUpdated: {\\n      type: modelTypes.outputTypes.file,\\n      args: {\\n        authorId: { type: GraphQLInt }\\n      },\\n      subscribe: withFilter(\\n        () => pubSub.asyncIterator('fileUpdated'),\\n        (payload, variables, context) => {\\n          if (!context.user || !payload) {\\n            return false\\n          }\\n          if (payload.fileUpdated.authorId !== variables.authorId) {\\n            return false\\n          }\\n          return true\\n        }\\n      )\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"You can also declare a fully custom endpoint who will not depend on the model. It will simply be added to the schema as a native GraphQL endpoint but no hooks will be available.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"graphqlSchemaDeclaration.myCustomCarEndpoint = () => {\\n  const car = new GraphQLObjectType({\\n    name: 'questionsScore',\\n    description: 'A score per question',\\n    fields: {\\n      name: { type: GraphQLString },\\n      type: { type: GraphQLString },\\n      constructor: { type: GraphQLString },\\n    },\\n  });\\n\\n  return {\\n    type: new GraphQLList(car),\\n    args: {\\n      constructor: { type: GraphQLString },\\n    },\\n    resolve: async (source, args, context) => {\\n      // Fetch the cars...\\n      return result;\\n    },\\n  };\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"relativePath":"resolvers/advancedConfiguration.md"},"frontmatter":{"metaTitle":"Advanced configuration","metaDescription":"Here we descripbe the advanced configurations of graphql-sequelize-generator"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/resolvers","title":"Resolvers"}}},{"node":{"fields":{"slug":"/gettingStarted","title":"Getting started"}}},{"node":{"fields":{"slug":"/","title":"Getting started"}}},{"node":{"fields":{"slug":"/server","title":"Server"}}},{"node":{"fields":{"slug":"/resolvers/1-defaultUsage","title":"Default usage"}}},{"node":{"fields":{"slug":"/server/apolloConfiguration","title":"Apollo configuration"}}},{"node":{"fields":{"slug":"/server/configuration","title":"Configuration"}}},{"node":{"fields":{"slug":"/resolvers/performances","title":"Performances"}}},{"node":{"fields":{"slug":"/resolvers/advancedConfiguration","title":"Advanced configuration"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2c505ee9-f5a3-5e2f-a003-49682d886e49"}}}